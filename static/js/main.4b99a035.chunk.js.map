{"version":3,"sources":["containers/ColorForm/ColorForm.js","components/ColorBox/ColorBox.js","components/ColorCont/ColorCont.js","containers/App/App.js","index.js"],"names":["tinycolor","require","ColorForm","handleChange","e","setState","target","name","value","submitColor","preventDefault","selectColor","props","state","color","isValid","resetInputs","innerText","document","getElementById","reset","displaySelection","colorEntered","greyscale","toString","style","background","resetButtonBackground","id","className","type","placeholder","this","onChange","onClick","onMouseOver","onMouseOut","Component","ColorBox","backgroundColor","ColorCont","colorDisplay","colors","map","index","key","App","selectedColor","generatedColors","tetrad","t","toHexString","ReactDOM","render","StrictMode"],"mappings":"4TAEMA,G,MAAYC,EAAQ,IAELC,E,kDACjB,aAAe,IAAD,8BACV,gBAIJC,aAAe,SAAAC,GACX,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SANhC,EASdC,YAAc,SAAAL,GACVA,EAAEM,iBADa,IAEPC,EAAgB,EAAKC,MAArBD,YACQX,EAAU,EAAKa,MAAMC,OAAOC,WAExCJ,EAAY,EAAKE,MAAMC,OACvB,EAAKE,YAAYZ,GACjBA,EAAEE,OAAOW,UAAY,UAErBb,EAAEE,OAAOW,UAAY,mCAlBf,EAsBdD,YAAc,SAAAZ,GACV,EAAKC,SAAS,CAACS,MAAO,KACtBI,SAASC,eAAe,aAAaC,SAxB3B,EA2BdC,iBAAmB,SAAAjB,GACf,IAAMkB,EAAY,WAAO,EAAKT,MAAMC,OAEpC,GADmBd,EAAUsB,GAAcP,UAC3B,CACZ,IAAMQ,EAAYvB,EAAUsB,GAAcC,YAAYC,WACtDpB,EAAEE,OAAOmB,MAAMC,WAAaJ,EAC5BlB,EAAEE,OAAOmB,MAAMX,MAAQS,IAjCjB,EAqCdI,sBAAwB,SAAAvB,GACpBA,EAAEE,OAAOmB,MAAMC,WAAa,UAC5BtB,EAAEE,OAAOmB,MAAMX,MAAQ,aArCvB,EAAKD,MAAQ,CAAEC,MAAO,IAFZ,E,qDA2CV,OACI,0BAAMc,GAAG,aACL,wBAAIC,UAAU,mBAAd,gBACA,2BACIC,KAAK,OACLC,YAAY,2BACZvB,MAAOwB,KAAKnB,MAAMC,MAClBP,KAAK,QACL0B,SAAUD,KAAK7B,eAEnB,yBAAK0B,UAAU,gBACX,4BACIK,QAASF,KAAKvB,YACd0B,YAAaH,KAAKX,iBAClBe,WAAYJ,KAAKL,uBAHrB,gB,GAvDmBU,aCFjCrC,G,YAAYC,EAAQ,IAiBXqC,EAfE,SAAC,GAAa,IAAZxB,EAAW,EAAXA,MACTS,EAAYvB,EAAUc,GAAOS,YAAYC,WAE/C,OACI,6BAASK,UAAU,cACf,yBAAKJ,MAAO,CAAEc,gBAAgB,GAAD,OAAKzB,IAC9Be,UAAU,oBAEd,wBAAIJ,MAAO,CAAEX,MAAM,GAAD,OAAKS,KAAvB,UACOT,OCGJ0B,EAZG,SAAC,GAAc,IACvBC,EADsB,EAAZC,OACYC,KAAI,SAAC7B,EAAO8B,GACpC,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAO9B,MAAOA,OAGxC,OACI,6BAASe,UAAU,aACdY,ICPPzC,EAAYC,EAAQ,GAEL6C,E,kDACnB,aAAe,IAAD,8BACZ,gBAIFnC,YAAc,SAAAG,GAEZ,IAAIiC,EAAgBjC,EACpB,GAAIA,EAAO,CACO,MAAbA,EAAM,KACPiC,EAAgB,IAAMjC,GAExB,IACMkC,EADahD,EAAU+C,GAAeE,SACTN,KAAI,SAAUO,GAAK,OAAOA,EAAEC,iBAC/D,EAAK9C,SAAS,CAAEqC,OAAO,YAAKM,OAZ9B,EAAKnC,MAAQ,CAAE6B,OAAQ,CAAC,GAAI,GAAI,GAAI,KAFxB,E,qDAmBZ,OACE,6BAASb,UAAU,OACjB,kBAAC,EAAD,CAAWlB,YAAaqB,KAAKrB,cAC7B,kBAAC,EAAD,CAAW+B,OAAQV,KAAKnB,MAAM6B,c,GAvBLL,aCFjCe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASC,eAAe,W","file":"static/js/main.4b99a035.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ColorForm.scss';\nconst tinycolor = require(\"tinycolor2\");\n\nexport default class ColorForm extends Component {\n    constructor() {\n        super()\n        this.state = { color: '' }\n    }\n\n    handleChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    submitColor = e => {\n        e.preventDefault();\n        const { selectColor } = this.props;\n        const isValid = tinycolor(this.state.color).isValid();\n        if (isValid) {\n            selectColor(this.state.color);\n            this.resetInputs(e);\n            e.target.innerText = 'Submit'\n        } else {\n            e.target.innerText = 'Please enter a valid hex color.'\n        }\n    }\n\n    resetInputs = e => {\n        this.setState({color: ''});\n        document.getElementById(\"colorForm\").reset()\n    }\n\n    displaySelection = e => {\n        const colorEntered = `#${this.state.color}`\n        const colorCheck = tinycolor(colorEntered).isValid();\n        if (colorCheck) {\n            const greyscale = tinycolor(colorEntered).greyscale().toString();\n            e.target.style.background = colorEntered;\n            e.target.style.color = greyscale;\n        }\n    }\n\n    resetButtonBackground = e => {\n        e.target.style.background = '#E0E5EC';\n        e.target.style.color = '#a3b1c699';   \n    }\n\n    render() {\n        return (\n            <form id='colorForm'>\n                <h1 className='color-change-5x'>Color Stream</h1>\n                <input\n                    type='text'\n                    placeholder='Please Enter A Hex Color'\n                    value={this.state.color}\n                    name='color'\n                    onChange={this.handleChange}\n                />\n                <div className='outer-button'>\n                    <button \n                        onClick={this.submitColor} \n                        onMouseOver={this.displaySelection}\n                        onMouseOut={this.resetButtonBackground}\n                    >Submit</button>\n                </div>\n            </form>\n        )\n    }\n}","import React from 'react';\nimport \"./ColorBox.scss\";\nconst tinycolor = require(\"tinycolor2\");\n\nconst ColorBox = ({color}) => {\n    const greyscale = tinycolor(color).greyscale().toString();\n    \n    return (\n        <section className='color-cont'>\n            <div style={{ backgroundColor: `${color}` }}\n                className='color-cont-inner'\n            >\n            <h3 style={{ color: `${greyscale}` }}\n              >{`${color}`}</h3>  \n            </div>\n        </section>\n    )\n}\n\nexport default ColorBox;","import React from 'react';\nimport \"./ColorCont.scss\";\nimport ColorBox from '../ColorBox/ColorBox';\n\nconst ColorCont = ({colors}) => {\n    const colorDisplay = colors.map((color, index) => {\n        return <ColorBox key={index} color={color} />\n    })\n\n    return (\n        <section className=\"ColorDisp\">\n            {colorDisplay}\n        </section>\n    )\n}\n\nexport default ColorCont;","import React, { Component } from 'react';\nimport './App.scss';\nimport ColorForm from '../ColorForm/ColorForm';\nimport ColorCont from '../../components/ColorCont/ColorCont';\nconst tinycolor = require(\"tinycolor2\");\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = { colors: ['', '', '', ''] }\n  }\n\n  selectColor = color => {\n    //add normalization for a variety of color inputs\n    let selectedColor = color;\n    if (color) {\n      if(color[0] !== '#') {\n        selectedColor = '#' + color;\n      }\n      const colorParse = tinycolor(selectedColor).tetrad();\n      const generatedColors = colorParse.map(function (t) { return t.toHexString(); });\n      this.setState({ colors: [...generatedColors]});\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"App\">\n        <ColorForm selectColor={this.selectColor}/>\n        <ColorCont colors={this.state.colors}/>\n      </section>\n    )\n  };\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}